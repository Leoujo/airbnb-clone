// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}


// User model, with his relations.
model User {
	// Every model in our db is gonna have this type of id 
	id String @id @default(auto()) @map("_id") @db.ObjectId
	name String? 
	email String? @unique
	emailVerified DateTime?
	image String?
	hashedPassword String?
	createdAt DateTime @default(now())
	updatedAt DateTime @updatedAt
	favoriteIds String[] @db.ObjectId

	accounts Account[]
	listings Listing[]
	reservations Reservation[]
}

model Account {
	id String @id @default(auto()) @map("_id") @db.ObjectId
	userId String @db.ObjectId
	type String 
	provider String
	providerAccountId String
	refresh_token String? @db.String 
	access_token String? @db.String
	expires_at Int?
	token_type String?
	scope String?
	id_token String? @db.String
	session_state String

	// Create a relation with the field userId and id (on User model).
	user User @relation(fields: [userId], references: [id], onDelete: Cascade)

	// attesting that we need an unique combination of these two fields
	@@unique([provider, providerAccountId])
}

model Listing {
	id String @id @default(auto()) @map("_id") @db.ObjectId
	title String
	description String
	imageSrc String
	createdAt DateTime @default(now())
	category String
	roomCount Int
	bathroomCount Int
	guestCount Int
	locationValue String
	userId String @db.ObjectId
	price Int

	user User @relation(fields: [userId], references: [id], onDelete: Cascade)
	reservations Reservation[]
}

model Reservation {
	id String @id @default(auto()) @map("_id") @db.ObjectId
	userId String @db.ObjectId
	listingId String @db.ObjectId
	startDate DateTime
	endDate DateTime
	totalPrice Int
	createdAt DateTime @default(now())

	// Creating a relation with user and listing as well
	user User @relation(fields: [userId], references: [id], onDelete: Cascade)
	listing Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)
}